pipeline {
  agent {
    docker {
      image 'smkayathiri/maven-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages{
    stage('checkout') {
      steps {
        echo 'passed'
      }
    }
    stage ('Build Maven') {
      steps { 
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
    stage ('static code analysis') {
      environment {
        SONAR_URL = "http://18.217.186.102:9000/"
      }
      steps {
        withCredentials ( [string(credentialsId : 'sonarqube',variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.url=${SONAR_URL}'
        }
      }
    }
    stage('build docker and push to docker hub') {
      environment {
        DOCKER_IMAGE="smkayathiri/ci-cd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS=withCredentials("docker-credentials")
      }
      steps {
        script {
          sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry("https://index.docker.io/v1/","docker-credentials"){
            dockerImage.push()
          }
        }
      }
    }
    stage('Deploy to Agro') {
      environment {
        GIT_REPO_NAME = "Jenkins-End-to-End-CI-CD-Agro-Project"
        GIT_USER_NAME = "somameenakayathirim"
      }
      steps {
        withCredentials([string(credentialsId : 'github',variable : 'GIT_AUTH_TOKEN' )]) {
          sh '''
             git config user.name "Kayathiri"
             BUILD_NUMBER = ${BUILD_NUMBER}
             sed -i "s/replaceBuildTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
             git add spring-boot-app-manifests/deployment.yml
             git commit -m "Update the build version ${BUILD_NUMBER}"
             git push https://${GIT_AUTH_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
             
          '''
        }
      }
    }
  }
}
